{
  "name": "Monday.com AI Tasks Generator - Fixed",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "monday-tasks",
        "responseMode": "responseNode",
        "options": {},
        "onError": "continueRegularOutput"
      },
      "id": "webhook-001",
      "name": "Webhook - Project Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [240, 300],
      "webhookId": "monday-tasks-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Process form data from webhook\nconst body = $json.body || $json;\nconst projectDescription = body.projectDescription || body['Project Description'] || '';\nconst boardId = body.boardId || body['Monday Board ID'] || '';\nconst groupId = body.groupId || body['Group ID (Optional)'] || null;\nconst groupName = body.groupName || body['Group Name (Optional)'] || null;\nconst assigneeEmails = body.assigneeEmails || null;\n\n// Validation\nif (!projectDescription || projectDescription.length < 10) {\n  return [{\n    json: {\n      success: false,\n      error: 'Project description must be at least 10 characters long',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nif (!boardId || !/^\\d+$/.test(boardId)) {\n  return [{\n    json: {\n      success: false,\n      error: 'Board ID must be numbers only',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    projectDescription: projectDescription.trim(),\n    boardId: boardId.trim(),\n    groupId: groupId ? groupId.trim() : null,\n    groupName: groupName ? groupName.trim() : null,\n    assigneeEmails: assigneeEmails ? assigneeEmails.trim().split(',').map(email => email.trim()).filter(email => email) : [],\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "validate-001",
      "name": "Validate Input Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $credentials.httpHeaderAuth.headerValue }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": {
          "model": "openai/gpt-4o-mini",
          "messages": [
            {
              "role": "system",
              "content": "You're an experienced project manager who breaks down complex projects into manageable tasks. Create 10 practical, actionable tasks that a real development team would work on. Use natural language and realistic time estimates."
            },
            {
              "role": "user",
              "content": "=Break down this project into 10 manageable tasks: {{ $json.projectDescription }}. Also create a short 2-3 word group name. Make them sound natural and realistic. Return JSON: {\"groupName\":\"Short Project Name\", \"tasks\":[{\"title\":\"Clear task name\",\"description\":\"What needs to be done and why\",\"priority\":\"High/Medium/Low\",\"estimatedHours\":8,\"phase\":\"Planning/Design/Development/Testing/Launch\",\"assignee\":\"Team role\"}]}"
            }
          ],
          "temperature": 0.7,
          "max_tokens": 2000
        }
      },
      "id": "ai-generate-001",
      "name": "AI - Generate Tasks",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [720, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "openrouter-api",
          "name": "OpenRouter API Key"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response with fallback\nlet tasks = [];\nlet aiUsed = false;\nlet aiGroupName = null;\n\ntry {\n  const aiResponse = $json.choices[0].message.content;\n  const jsonMatch = aiResponse.match(/\\{.*\\}/s);\n  if (jsonMatch) {\n    const aiData = JSON.parse(jsonMatch[0]);\n    if (aiData.tasks && Array.isArray(aiData.tasks)) {\n      tasks = aiData.tasks;\n      aiGroupName = aiData.groupName || null;\n      aiUsed = true;\n    }\n  }\n} catch (error) {\n  console.log('AI failed, using fallback');\n}\n\nif (!Array.isArray(tasks) || tasks.length === 0) {\n  const projectDesc = $('Validate Input Data').item.json.projectDescription;\n  aiGroupName = projectDesc.split(' ').slice(0, 2).join(' '); // Use first 2 words as fallback\n  tasks = [\n    {\"title\":\"Project Planning\",\"description\":\"Plan project: \" + projectDesc.substring(0,50) + \"...\",\"priority\":\"High\",\"estimatedHours\":16,\"phase\":\"Planning\",\"assignee\":\"Project Manager\"},\n    {\"title\":\"System Architecture\",\"description\":\"Design system architecture\",\"priority\":\"High\",\"estimatedHours\":20,\"phase\":\"Design\",\"assignee\":\"Solution Architect\"},\n    {\"title\":\"UI/UX Design\",\"description\":\"Create user interface designs\",\"priority\":\"High\",\"estimatedHours\":24,\"phase\":\"Design\",\"assignee\":\"UI/UX Designer\"},\n    {\"title\":\"Backend Development\",\"description\":\"Implement backend services\",\"priority\":\"High\",\"estimatedHours\":40,\"phase\":\"Development\",\"assignee\":\"Backend Developer\"},\n    {\"title\":\"Frontend Development\",\"description\":\"Build user interface\",\"priority\":\"High\",\"estimatedHours\":32,\"phase\":\"Development\",\"assignee\":\"Frontend Developer\"},\n    {\"title\":\"Database Setup\",\"description\":\"Configure database\",\"priority\":\"Medium\",\"estimatedHours\":16,\"phase\":\"Development\",\"assignee\":\"Database Admin\"},\n    {\"title\":\"API Integration\",\"description\":\"Connect external APIs\",\"priority\":\"Medium\",\"estimatedHours\":20,\"phase\":\"Development\",\"assignee\":\"Full-stack Developer\"},\n    {\"title\":\"Testing & QA\",\"description\":\"Test all functionality\",\"priority\":\"Medium\",\"estimatedHours\":24,\"phase\":\"Testing\",\"assignee\":\"QA Engineer\"},\n    {\"title\":\"Deployment\",\"description\":\"Deploy to production\",\"priority\":\"Low\",\"estimatedHours\":12,\"phase\":\"Deployment\",\"assignee\":\"DevOps Engineer\"},\n    {\"title\":\"Documentation\",\"description\":\"Create documentation\",\"priority\":\"Low\",\"estimatedHours\":8,\"phase\":\"Deployment\",\"assignee\":\"Technical Writer\"}\n  ];\n}\n\ntasks = tasks.slice(0, 10);\nconst validatedData = $('Validate Input Data').item.json;\n\n// If we have assignee emails, randomly assign them to tasks\nif (validatedData.assigneeEmails && validatedData.assigneeEmails.length > 0) {\n  tasks = tasks.map((task, index) => {\n    const assigneeIndex = index % validatedData.assigneeEmails.length;\n    return {\n      ...task,\n      assignee: validatedData.assigneeEmails[assigneeIndex]\n    };\n  });\n}\n\nreturn [{\n  json: {\n    tasks: tasks,\n    projectDescription: validatedData.projectDescription,\n    boardId: validatedData.boardId,\n    groupId: validatedData.groupId,\n    groupName: validatedData.groupName,\n    aiGroupName: aiGroupName,\n    assigneeEmails: validatedData.assigneeEmails,\n    aiUsed: aiUsed,\n    tasksCount: tasks.length\n  }\n}];"
      },
      "id": "parse-001",
      "name": "Parse AI Tasks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [960, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.groupId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "if-001",
      "name": "IF - Group Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "resource": "boardGroup",
        "operation": "create",
        "boardId": "={{ $json.boardId }}",
        "name": "={{ $json.groupName || $json.aiGroupName || 'Project Tasks' }}"
      },
      "id": "create-group-001",
      "name": "Monday - Create Group",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [1440, 480],
      "credentials": {
        "mondayComApi": {
          "id": "monday-api",
          "name": "Monday.com API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Get the original task data from Parse AI Tasks node\nconst parseTasksData = $('Parse AI Tasks').item.json;\nconsole.log('Original task data:', JSON.stringify(parseTasksData));\n\n// Get current data (might be group creation result)\nconst currentData = $json;\nconsole.log('Current data:', JSON.stringify(currentData));\n\n// Determine final group ID\nlet finalGroupId;\nif (parseTasksData.groupId) {\n  // Use existing group ID\n  finalGroupId = parseTasksData.groupId;\n} else {\n  // Use newly created group ID\n  finalGroupId = currentData.id || 'AI-Generated-Tasks';\n}\n\n// Get tasks from the original parse data\nconst tasks = parseTasksData.tasks || [];\nconsole.log('Tasks found:', tasks.length);\n\nif (!Array.isArray(tasks) || tasks.length === 0) {\n  return [{\n    json: {\n      error: 'No tasks array found in original data',\n      parseTasksData: parseTasksData,\n      currentData: currentData,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Split tasks into individual items\nconst outputs = [];\ntasks.forEach((task, index) => {\n  outputs.push({\n    json: {\n      boardId: parseTasksData.boardId,\n      groupId: finalGroupId,\n      task: task,\n      taskIndex: index + 1,\n      totalTasks: tasks.length,\n      projectDescription: parseTasksData.projectDescription\n    }\n  });\n});\n\nconsole.log('Split into', outputs.length, 'task items');\nreturn outputs;"
      },
      "id": "split-001",
      "name": "Split Tasks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Create Monday item and preserve task data\nconst taskData = $json;\nconsole.log('Creating item for task:', JSON.stringify(taskData.task));\n\n// We'll need to call Monday API manually to preserve the task data\n// Or use the Monday node and then combine the result\n\n// For now, pass through all the data we need\nreturn [{\n  json: {\n    ...taskData,\n    // Add any preprocessing here\n    readyForCreation: true\n  }\n}];"
      },
      "id": "prep-create-001",
      "name": "Prep Create Item",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1920, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "create",
        "boardId": "={{ $json.boardId }}",
        "groupId": "={{ $json.groupId }}",
        "name": "={{ $json.task.title }}"
      },
      "id": "create-item-001",
      "name": "Monday - Create Item",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [2160, 300],
      "credentials": {
        "mondayComApi": {
          "id": "monday-api",
          "name": "Monday.com API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Combine Monday.com result with original task data\nconst mondayResult = $json; // This has the item ID\nconst originalTaskData = $input.first().json; // This has the task info\n\nconsole.log('Monday result:', JSON.stringify(mondayResult));\nconsole.log('Original task data:', JSON.stringify(originalTaskData));\n\nreturn [{\n  json: {\n    // Monday.com response\n    itemId: mondayResult.id,\n    mondayItem: mondayResult,\n    // Original task data\n    task: originalTaskData.task,\n    boardId: originalTaskData.boardId,\n    groupId: originalTaskData.groupId,\n    taskIndex: originalTaskData.taskIndex\n  }\n}];"
      },
      "id": "combine-data-001",
      "name": "Combine Item Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2400, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Now we have the combined data from Combine Item Data node\nconst data = $json;\nconst task = data.task || {};\nconst itemId = data.itemId;\nconst boardId = data.boardId;\n\nconsole.log('Combined data received:', JSON.stringify(data));\nconsole.log('Task:', JSON.stringify(task));\nconsole.log('Item ID:', itemId);\n\n// Create column values with proper Monday.com format\nconst columnValues = {};\n\n// Add description to text column if available\nif (task.description) {\n  columnValues.text = task.description.substring(0, 255);\n  console.log('Added description');\n}\n\n// Add priority as status using index format (High=0, Medium=1, Low=2)\nif (task.priority) {\n  let statusIndex = 0; // Default to High\n  if (task.priority.toLowerCase() === 'medium') statusIndex = 1;\n  if (task.priority.toLowerCase() === 'low') statusIndex = 2;\n  \n  columnValues.status = {\n    index: statusIndex,\n    label: task.priority\n  };\n  console.log('Added priority:', task.priority);\n}\n\n// Add assignee - Note: This requires actual Monday.com user IDs\n// Email-based assignment would need additional lookup\nif (task.assignee && typeof task.assignee === 'string') {\n  // Store as text for now - would need user lookup for proper people column\n  columnValues.text_assignee = task.assignee;\n  console.log('Added assignee as text:', task.assignee);\n}\n\nconsole.log('Final column values:', JSON.stringify(columnValues));\n\nreturn [{\n  json: {\n    boardId: boardId,\n    itemId: itemId,\n    columnValues: JSON.stringify(columnValues),\n    task: task\n  }\n}];"
      },
      "id": "prepare-columns-001",
      "name": "Prepare Column Values",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2640, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "changeMultipleColumnValues",
        "boardId": "={{ $json.boardId }}",
        "itemId": "={{ $json.itemId }}",
        "columnValues": "={{ $json.columnValues }}"
      },
      "id": "update-item-001",
      "name": "Monday - Update Item",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [2880, 300],
      "credentials": {
        "mondayComApi": {
          "id": "monday-api",
          "name": "Monday.com API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "waitForAllItems": true
        }
      },
      "id": "merge-001",
      "name": "Merge Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [3120, 300]
    },
    {
      "parameters": {
        "jsCode": "const results = $input.all();\nconst summary = {\n  success: true,\n  message: 'Successfully created ' + results.length + ' tasks in Monday.com!',\n  tasksCreated: results.length,\n  boardId: results[0] ? results[0].json.boardId : null,\n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: summary }];"
      },
      "id": "summary-001",
      "name": "Create Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3360, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "respond-001",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [3600, 300],
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "Webhook - Project Input": {
      "main": [
        [
          {
            "node": "Validate Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input Data": {
      "main": [
        [
          {
            "node": "AI - Generate Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI - Generate Tasks": {
      "main": [
        [
          {
            "node": "Parse AI Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Tasks": {
      "main": [
        [
          {
            "node": "IF - Group Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Group Exists": {
      "main": [
        [
          {
            "node": "Split Tasks",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Monday - Create Group",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monday - Create Group": {
      "main": [
        [
          {
            "node": "Split Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Tasks": {
      "main": [
        [
          {
            "node": "Prep Create Item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Create Item": {
      "main": [
        [
          {
            "node": "Monday - Create Item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monday - Create Item": {
      "main": [
        [
          {
            "node": "Combine Item Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Item Data": {
      "main": [
        [
          {
            "node": "Prepare Column Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Column Values": {
      "main": [
        [
          {
            "node": "Monday - Update Item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monday - Update Item": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Create Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Summary": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["monday.com", "ai-tasks", "validated"],
  "triggerCount": 1,
  "updatedAt": "2025-08-04T10:00:00.000Z",
  "versionId": "1.1-fixed"
}