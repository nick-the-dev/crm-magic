{
  "name": "Monday.com AI Tasks Generator - Enhanced v2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "monday-tasks",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-001",
      "name": "Webhook - Project Input",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [240, 304],
      "webhookId": "monday-tasks-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Process form data from webhook\nconst body = $json.body || $json;\nconst projectDescription = body.projectDescription || body['Project Description'] || '';\nconst boardId = body.boardId || body['Monday Board ID'] || '';\nconst groupId = body.groupId || body['Group ID (Optional)'] || null;\nconst groupName = body.groupName || body['Group Name (Optional)'] || null;\nconst assigneeEmails = body.assigneeEmails || null;\nconst weeklyHours = body.weeklyHours || body['Weekly Hours'] || 40; // Default to 40 hours per week\n\n// Validation\nif (!projectDescription || projectDescription.length < 10) {\n  return [{\n    json: {\n      success: false,\n      error: 'Project description must be at least 10 characters long',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nif (!boardId || !/^\\d+$/.test(boardId)) {\n  return [{\n    json: {\n      success: false,\n      error: 'Board ID must be numbers only',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Validate weekly hours is between 38-42 if specified\nconst hours = parseFloat(weeklyHours);\nif (isNaN(hours) || hours < 20 || hours > 60) {\n  return [{\n    json: {\n      success: false,\n      error: 'Weekly hours must be between 20 and 60',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    projectDescription: projectDescription.trim(),\n    boardId: boardId.trim(),\n    groupId: groupId ? groupId.trim() : null,\n    groupName: groupName ? groupName.trim() : null,\n    assigneeEmails: assigneeEmails ? assigneeEmails.trim().split(',').map(email => email.trim()).filter(email => email) : [],\n    weeklyHours: hours,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "validate-001",
      "name": "Validate Input Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [464, 304]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $credentials.httpHeaderAuth.headerValue }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": {
          "model": "google/gemini-2.5-flash",
          "messages": [
            {
              "role": "system",
              "content": "You're a busy project manager quickly jotting down tasks for your team. Write like you're in a hurry - sometimes lowercase, occasional typos, inconsistent capitalization. Make it feel like real notes from a planning meeting. Mix formal and informal language. Sometimes use abbreviations. CRITICAL: Each task represents ONE WORKING DAY (8 hours). IMPORTANT: Each task's startDate and endDate MUST be on the SAME DAY. Start times should vary between 06:00-10:00 (randomly choose), end time is exactly 8 hours after start. For example: start 06:00 → end 14:00, start 08:30 → end 16:30, start 10:00 → end 18:00."
            },
            {
              "role": "user",
              "content": "=Break down this week's work for the project: {{ $json.projectDescription }}. CRITICAL: Generate EXACTLY {{ Math.floor(Math.random() * 3) + 3 }} tasks (randomly 3, 4, or 5). Each task is ONE WORKING DAY (about 8 hours). The total hours should be {{ Math.floor(Math.random() * 5) + 38 }} hours (randomly between 38-42). IMPORTANT DATES: Each task MUST start and end on the SAME DAY. For each task, randomly choose start time between 06:00-10:00 (can use 06:00, 06:30, 07:00, 07:30, 08:00, 08:30, 09:00, 09:30, 10:00). End time is EXACTLY 8 hours after start. Examples: start 06:00→end 14:00, start 07:30→end 15:30, start 10:00→end 18:00. Schedule tasks across Monday-Friday this week. Today is {{ new Date().toISOString().split('T')[0] }}. If generating 5 tasks, use Mon-Fri. If 4 tasks, skip one day. If 3 tasks, use Mon/Wed/Fri. Create a group name (2-6 words) for this week's sprint. Write naturally - mix uppercase/lowercase, occasional typo ok. Return JSON: {\"groupName\":\"Week's focus (2-6 words)\", \"taskCount\":number_of_tasks, \"totalHours\":total_hours_for_week, \"tasks\":[{\"title\":\"Task name (natural, not perfect)\",\"description\":\"Quick notes about what to do - informal style ok\",\"priority\":\"High/Medium/Low\",\"hoursAllocated\":8,\"phase\":\"Planning/Design/Development/Testing/Launch\",\"assignee\":\"Team role\",\"startDate\":\"YYYY-MM-DD HH:mm\",\"endDate\":\"YYYY-MM-DD HH:mm\"}]}"
            }
          ],
          "temperature": 0.7,
          "max_tokens": 2000
        },
        "options": {}
      },
      "id": "ai-generate-001",
      "name": "AI - Generate Tasks",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [688, 304],
      "credentials": {
        "httpHeaderAuth": {
          "id": "OpenRouter account",
          "name": "OpenRouter account"
        },
        "openRouterApi": {
          "id": "xmGkw2f6B5gc0tps",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response - AI only, no fallback\nconst validatedData = $('Validate Input Data').item.json;\nlet tasks = [];\nlet aiGroupName = null;\n\n// Extract AI response\nconst aiResponse = $json.choices[0].message.content;\nconsole.log('AI Response:', aiResponse);\n\n// Find JSON in the AI response\nconst jsonMatch = aiResponse.match(/{[\\s\\S]*}/s);\nif (!jsonMatch) {\n  throw new Error('No JSON found in AI response');\n}\n\nconst aiData = JSON.parse(jsonMatch[0]);\nconsole.log('Parsed AI data:', JSON.stringify(aiData));\n\nif (!aiData.tasks || !Array.isArray(aiData.tasks) || aiData.tasks.length === 0) {\n  throw new Error('AI did not return valid tasks array');\n}\n\n// Validate task count is between 3-5\nif (aiData.tasks.length < 3 || aiData.tasks.length > 5) {\n  throw new Error(`AI returned ${aiData.tasks.length} tasks, but expected 3-5 tasks`);\n}\n\ntasks = aiData.tasks;\naiGroupName = aiData.groupName || 'Weekly Sprint';\n\n// Verify total hours match weekly allocation\nconst totalHours = tasks.reduce((sum, task) => sum + (task.hoursAllocated || 0), 0);\nconsole.log(`Total hours allocated: ${totalHours}, Expected: ${validatedData.weeklyHours}`);\n\n// If we have assignee emails, assign them to tasks\nif (validatedData.assigneeEmails && validatedData.assigneeEmails.length > 0) {\n  tasks = tasks.map((task, index) => {\n    const assigneeIndex = index % validatedData.assigneeEmails.length;\n    return {\n      ...task,\n      assignee: validatedData.assigneeEmails[assigneeIndex]\n    };\n  });\n}\n\nreturn [{\n  json: {\n    tasks: tasks,\n    projectDescription: validatedData.projectDescription,\n    boardId: validatedData.boardId,\n    groupId: validatedData.groupId,\n    groupName: validatedData.groupName,\n    aiGroupName: aiGroupName,\n    assigneeEmails: validatedData.assigneeEmails,\n    weeklyHours: validatedData.weeklyHours,\n    aiUsed: true,\n    tasksCount: tasks.length\n  }\n}];"
      },
      "id": "parse-001",
      "name": "Parse AI Tasks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [912, 304]
    },
    {
      "parameters": {
        "jsCode": "// Lookup all unique assignee emails BEFORE creating items\nconst data = $json;\nconst tasks = data.tasks || [];\n\nconsole.log('=== PRE-CREATION USER LOOKUP ===');\nconsole.log('Total tasks:', tasks.length);\n\n// Extract unique emails from tasks\nconst uniqueEmails = new Set();\ntasks.forEach(task => {\n  if (task.assignee && typeof task.assignee === 'string' && task.assignee.includes('@')) {\n    uniqueEmails.add(task.assignee.trim());\n  }\n});\n\nconsole.log('Unique emails to lookup:', Array.from(uniqueEmails));\n\n// Always pass through data, with or without emails\nif (uniqueEmails.size === 0) {\n  console.log('No emails to lookup, passing through with empty map');\n  return [{\n    json: {\n      ...data,\n      userLookupMap: {},\n      emailsToLookup: [],\n      skipLookup: true\n    }\n  }];\n}\n\n// Build GraphQL query for all emails at once\nconst emailsArray = Array.from(uniqueEmails);\nconst emailsString = emailsArray.map(email => `\\\"${email}\\\"`).join(', ');\nconst query = `\n  query {\n    users(emails: [${emailsString}]) {\n      id\n      name\n      email\n    }\n  }\n`;\n\nconsole.log('GraphQL query for bulk lookup:', query);\n\nreturn [{\n  json: {\n    ...data,\n    graphqlQuery: query,\n    emailsToLookup: emailsArray,\n    skipLookup: false\n  }\n}];"
      },
      "id": "user-lookup-prep-bulk",
      "name": "Prepare Bulk User Lookup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1136, 304]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.monday.com/v2",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mondayComApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"query\": $json.skipLookup ? \"query { users(limit: 0) { id } }\" : $json.graphqlQuery } }}",
        "options": {}
      },
      "id": "bulk-user-lookup",
      "name": "Monday - Bulk User Lookup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1360, 304],
      "credentials": {
        "mondayComApi": {
          "id": "81ZKNPfmUGTEOCKI",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process bulk user lookup results and create email->userId map\nconst lookupResult = $json;\nconst originalData = $('Prepare Bulk User Lookup').item.json;\n\nconsole.log('=== BULK USER LOOKUP RESULTS ===');\nconsole.log('Skip lookup flag:', originalData.skipLookup);\nconsole.log('Lookup result:', JSON.stringify(lookupResult, null, 2));\nconsole.log('Original data preserved:', JSON.stringify(originalData, null, 2));\n\nlet userLookupMap = {};\n\nif (originalData.skipLookup) {\n  console.log('Lookup was skipped, using empty map');\n} else if (lookupResult.data && lookupResult.data.users && Array.isArray(lookupResult.data.users)) {\n  console.log(`Found ${lookupResult.data.users.length} users in lookup response`);\n  lookupResult.data.users.forEach(user => {\n    if (user.email && user.id) {\n      userLookupMap[user.email.toLowerCase()] = parseInt(user.id);\n      console.log(`✅ Mapped ${user.email} -> ${user.id}`);\n    } else {\n      console.log(`⚠️ User missing email or id:`, user);\n    }\n  });\n  console.log('Created user lookup map:', JSON.stringify(userLookupMap));\n} else if (lookupResult.errors) {\n  console.log('❌ GraphQL errors:', JSON.stringify(lookupResult.errors));\n} else {\n  console.log('❌ No users found in response, full response:', JSON.stringify(lookupResult));\n}\n\n// Make sure we pass through ALL original data fields including weeklyHours\nreturn [{\n  json: {\n    tasks: originalData.tasks,\n    projectDescription: originalData.projectDescription,\n    boardId: originalData.boardId,\n    groupId: originalData.groupId,\n    groupName: originalData.groupName,\n    aiGroupName: originalData.aiGroupName,\n    assigneeEmails: originalData.assigneeEmails,\n    weeklyHours: originalData.weeklyHours,\n    aiUsed: originalData.aiUsed,\n    tasksCount: originalData.tasksCount,\n    userLookupMap: userLookupMap\n  }\n}];"
      },
      "id": "process-bulk-lookup",
      "name": "Process Bulk Lookup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1584, 304]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.groupId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-group-exists",
      "name": "IF - Group Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1808, 304]
    },
    {
      "parameters": {
        "resource": "boardGroup",
        "boardId": "={{ $json.boardId }}",
        "name": "={{ $json.groupName || $json.aiGroupName || 'Project Tasks' }}"
      },
      "id": "create-group",
      "name": "Monday - Create Group",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [2032, 368],
      "credentials": {
        "mondayComApi": {
          "id": "81ZKNPfmUGTEOCKI",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Split tasks and prepare for creation WITH owner IDs\n// Get the original data with tasks from Process Bulk Lookup node\nconst parseTasksData = $('Process Bulk Lookup').item.json;\nconsole.log('Data from Process Bulk Lookup:', JSON.stringify(parseTasksData, null, 2));\n\n// Get the current input (might be from IF node or Create Group node)\nconst currentData = $json;\nconst userLookupMap = parseTasksData.userLookupMap || {};\n\n// Determine final group ID\nlet finalGroupId;\nif (parseTasksData.groupId) {\n  // User provided a group ID\n  finalGroupId = parseTasksData.groupId;\n} else if (parseTasksData.groupName && parseTasksData.groupName.toLowerCase() === 'to-do') {\n  // Special case for To-Do group\n  finalGroupId = 'new_group29179';\n} else if (currentData.id) {\n  // We just created a new group, use its ID\n  finalGroupId = currentData.id;\n  console.log('Using newly created group ID:', finalGroupId);\n} else {\n  // Fallback to To-Do group\n  finalGroupId = 'new_group29179';\n}\n\nconsole.log('Using final group ID:', finalGroupId);\n\nconst tasks = parseTasksData.tasks || [];\nconsole.log('Tasks found:', tasks.length);\nconsole.log('User lookup map:', userLookupMap);\n\nif (!Array.isArray(tasks) || tasks.length === 0) {\n  return [{\n    json: {\n      error: 'No tasks array found',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Split tasks with owner IDs already resolved\nconst outputs = [];\ntasks.forEach((task, index) => {\n  let ownerId = null;\n  \n  // Lookup owner ID if assignee is an email\n  if (task.assignee && typeof task.assignee === 'string' && task.assignee.includes('@')) {\n    const emailLower = task.assignee.toLowerCase();\n    ownerId = userLookupMap[emailLower] || null;\n    console.log(`Task ${index + 1}: ${task.title} - Assignee: ${task.assignee} - Owner ID: ${ownerId}`);\n  }\n  \n  outputs.push({\n    json: {\n      boardId: parseTasksData.boardId,\n      groupId: finalGroupId,\n      task: task,\n      taskIndex: index + 1,\n      totalTasks: tasks.length,\n      projectDescription: parseTasksData.projectDescription,\n      weeklyHours: parseTasksData.weeklyHours,\n      ownerId: ownerId // Include resolved owner ID\n    }\n  });\n});\n\nconsole.log('Split into', outputs.length, 'task items');\nreturn outputs;"
      },
      "id": "split-tasks-with-owners",
      "name": "Split Tasks With Owners",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2256, 304]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Prepare item creation with ALL fields including owner\nconst data = $json;\nconst task = data.task || {};\nconst ownerId = data.ownerId;\n\nconsole.log('=== PREPARING ITEM WITH OWNER ===');\nconsole.log('Task:', task.title);\nconsole.log('Owner ID:', ownerId);\nconsole.log('Hours Allocated:', task.hoursAllocated);\nconsole.log('Start Date:', task.startDate);\nconsole.log('End Date:', task.endDate);\n\n// Build column values for additional fields\nconst columnValues = {};\n\n// Add description to Notes column\nif (task.description) {\n  columnValues.text9 = task.description.substring(0, 255);\n}\n\n// Add priority\nif (task.priority) {\n  const priorityMap = {\n    'high': { index: 110, label: 'High' },\n    'medium': { index: 109, label: 'Medium' },\n    'low': { index: 7, label: 'Low' }\n  };\n  const priorityKey = task.priority.toLowerCase();\n  columnValues.priority_1 = priorityMap[priorityKey] || priorityMap['medium'];\n}\n\n// Add owner ID if we have it\nif (ownerId) {\n  const ownerValue = {\n    personsAndTeams: [\n      {\n        id: parseInt(ownerId),\n        kind: \"person\"\n      }\n    ]\n  };\n  columnValues.project_owner = ownerValue;\n  console.log('✅ Setting owner with ID:', ownerId);\n}\n\n// Add Start date (date_mktnwa6n)\nif (task.startDate) {\n  // Use the date string directly without timezone conversion\n  // Expected format from AI: \"YYYY-MM-DD HH:mm\"\n  const [datePart, timePart] = task.startDate.split(' ');\n  if (datePart && timePart) {\n    columnValues.date_mktnwa6n = { \n      date: datePart,\n      time: timePart + ':00' // Add seconds if not present\n    };\n    console.log('✅ Setting Start date:', task.startDate);\n  }\n}\n\n// Add End date (date_mktn9ngh)\nif (task.endDate) {\n  // Use the date string directly without timezone conversion\n  // Expected format from AI: \"YYYY-MM-DD HH:mm\"\n  const [datePart, timePart] = task.endDate.split(' ');\n  if (datePart && timePart) {\n    columnValues.date_mktn9ngh = {\n      date: datePart,\n      time: timePart + ':00' // Add seconds if not present\n    };\n    console.log('✅ Setting End date:', task.endDate);\n  }\n}\n\nconsole.log('Column values to set:', JSON.stringify(columnValues, null, 2));\n\nreturn {\n  json: {\n    ...data,\n    columnValues: columnValues,\n    columnValuesString: JSON.stringify(columnValues)\n  }\n};"
      },
      "id": "prep-item-with-owner",
      "name": "Prep Item With Owner",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2480, 304]
    },
    {
      "parameters": {
        "resource": "boardItem",
        "boardId": "={{ $json.boardId }}",
        "groupId": "={{ $json.groupId }}",
        "name": "={{ $json.task.title }}",
        "additionalFields": {
          "columnValues": "={{ $json.columnValuesString }}"
        }
      },
      "id": "create-item-with-owner",
      "name": "Monday - Create Item With Owner",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [2704, 304],
      "credentials": {
        "mondayComApi": {
          "id": "81ZKNPfmUGTEOCKI",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const results = $input.all();\nconst summary = {\n  success: true,\n  message: 'Successfully created ' + results.length + ' tasks for this week in Monday.com!',\n  tasksCreated: results.length,\n  boardId: results[0] ? results[0].json.boardId : null,\n  weeklyHours: results[0] ? results[0].json.weeklyHours : 40,\n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: summary }];"
      },
      "id": "summary",
      "name": "Create Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2928, 304]
    },
    {
      "parameters": {},
      "id": "respond",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [3152, 304]
    }
  ],
  "connections": {
    "Webhook - Project Input": {
      "main": [[{"node": "Validate Input Data", "type": "main", "index": 0}]]
    },
    "Validate Input Data": {
      "main": [[{"node": "AI - Generate Tasks", "type": "main", "index": 0}]]
    },
    "AI - Generate Tasks": {
      "main": [[{"node": "Parse AI Tasks", "type": "main", "index": 0}]]
    },
    "Parse AI Tasks": {
      "main": [[{"node": "Prepare Bulk User Lookup", "type": "main", "index": 0}]]
    },
    "Prepare Bulk User Lookup": {
      "main": [[{"node": "Monday - Bulk User Lookup", "type": "main", "index": 0}]]
    },
    "Monday - Bulk User Lookup": {
      "main": [[{"node": "Process Bulk Lookup", "type": "main", "index": 0}]]
    },
    "Process Bulk Lookup": {
      "main": [[{"node": "IF - Group Exists", "type": "main", "index": 0}]]
    },
    "IF - Group Exists": {
      "main": [
        [{"node": "Split Tasks With Owners", "type": "main", "index": 0}],
        [{"node": "Monday - Create Group", "type": "main", "index": 0}]
      ]
    },
    "Monday - Create Group": {
      "main": [[{"node": "Split Tasks With Owners", "type": "main", "index": 0}]]
    },
    "Split Tasks With Owners": {
      "main": [[{"node": "Prep Item With Owner", "type": "main", "index": 0}]]
    },
    "Prep Item With Owner": {
      "main": [[{"node": "Monday - Create Item With Owner", "type": "main", "index": 0}]]
    },
    "Monday - Create Item With Owner": {
      "main": [[{"node": "Create Summary", "type": "main", "index": 0}]]
    },
    "Create Summary": {
      "main": [[{"node": "Respond to Webhook", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}